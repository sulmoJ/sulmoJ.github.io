{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/network/3","result":{"data":{"markdownRemark":{"id":"e8729e20-ea11-526f-8b47-a5d322b9dab3","html":"<h2 id=\"http\" style=\"position:relative;\"><a href=\"#http\" aria-label=\"http permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP</h2>\n<p>HTTP는 HTML과 같은 문서나 리소스를 가져올 수 있도록 해주는 프로토콜입니다.</p>\n<ul>\n<li>http의 구조로 <strong>헤더</strong>와 <strong>바디</strong>로 구분되어 있음</li>\n<li>서버와 클라이언트 프로토콜이기도 하기때문에 <strong>요청</strong>과 <strong>응답</strong>으로 구분됨</li>\n<li>(이외에도 추가적인 많은 정보가 있음으로 한번쯤 <a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">문서</a>들을 참고하기 바람)</li>\n</ul>\n<h3 id=\"http-method\" style=\"position:relative;\"><a href=\"#http-method\" aria-label=\"http method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP method</h3>\n<p>여러가지 많은 기능과 특징이 있지만 그중에서 <strong>HTTP 메소드</strong>라는 개념이 있고, 이는 주어진 리소스들이 <strong>수행하길 원하는 행동</strong>을 나타내 줍니다.\n(메소드의 종류로 GET, HEAD, POST, PUT, DELETE 등등이 있습니다.)</p>\n<h3 id=\"get과-post\" style=\"position:relative;\"><a href=\"#get%EA%B3%BC-post\" aria-label=\"get과 post permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GET과 POST</h3>\n<p>둘다 요청의 메소드이지만 다른점이 많습니다.</p>\n<ul>\n<li>요청을 위한 자원을 보내는 방식(body의 유무)</li>\n<li>멱등성</li>\n<li>속도(캐싱)</li>\n</ul>\n<h4 id=\"요청을-위한-자원을-보내는-방식\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%B2%AD%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%9E%90%EC%9B%90%EC%9D%84-%EB%B3%B4%EB%82%B4%EB%8A%94-%EB%B0%A9%EC%8B%9D\" aria-label=\"요청을 위한 자원을 보내는 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요청을 위한 자원을 보내는 방식</h4>\n<p>‘http의 구조에서 크게 헤더와 바디가 있다’ 라고 언급했었는데 이 부분에서 GET과 POST의 차이가 있습니다.</p>\n<ul>\n<li>\n<p>GET</p>\n<ul>\n<li>GET방식은 body가 없습니다. 공간자체가 없다기보단 사용하지 않습니다. 그래서 값 자첵가 url에 담겨지는 방식이며 그대로 노출이 되어있습니다. 또한 데이터를 보낼때의 최대양도 Post방식에 비해 적고, <code class=\"language-text\">Content-Type</code>이라는 속성 또한 작성되지 않습니다.</li>\n<li><strong>쿼리스트링</strong> 과 <strong>Path Value</strong>으로 값을 전달합니다. <a href=\"https://ooeunz.tistory.com/43\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">(참고)</a></li>\n<li>\n<p>쿼리스트링</p>\n<blockquote>\n<p>www.example.com?key1=value1&#x26;key2=value2</p>\n</blockquote>\n<p>이러한 형식으로 ?이후에 키=값으로 전달하며 &#x26;로 추가적으로 값들을 더 담을 수 있습니다.</p>\n</li>\n<li>\n<p>Path Value</p>\n<blockquote>\n<p>www.example.com/users/123</p>\n</blockquote>\n<p>경로 자체에 값을 넣는 방식으로, 공식적인 방식이라기보단 추가적인 방법으로 인지하면 좋을것 같습니다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>POST</p>\n<ul>\n<li>POST방식은 body가 존재합니다.</li>\n<li>GET방식에는 없었던 <code class=\"language-text\">Content-Type</code>속성이 있고 이는 body에 담길 데이터에대한 정보를 가집니다.</li>\n<li>content-type의 종류 : [application/x-www-form-urlencoded, text/plain, multipart/form-data … 등등]</li>\n<li>body에 데이터가 담겨가는 만큼 데이터가 밖으로 들어나지 않아 더 안전하다고 하지만 조금 단계가 더 있을 뿐 body내부의 값 또한 확인이 가능하다고 합니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"멱등성\" style=\"position:relative;\"><a href=\"#%EB%A9%B1%EB%93%B1%EC%84%B1\" aria-label=\"멱등성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멱등성</h4>\n<p>멱등성이라는 익숙하지 않은 용어가 있는데, 수학쪽에서 ‘연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질’ 이라고 합니다.</p>\n<p>위 정의를 HTTP method에 적용 시키면, <strong>같은 요청을 넣으면 같은 결과가 항상 나와야 하는 성질</strong>입니다.</p>\n<p>이 성질에 해당하는 요청이 <code class=\"language-text\">GET</code> 이며, <code class=\"language-text\">POST</code>는 반대가 됩니다.</p>\n<p>그래서 GET은 보통 데이터를 조회하는 작업에 해당하며, 반대로 POST는 사용자로부터 받은 정보에의해 생성, 삭제, 변경될 수 있어 다른결과가 나오는 작업들에 해당합니다.</p>\n<h4 id=\"속도캐싱\" style=\"position:relative;\"><a href=\"#%EC%86%8D%EB%8F%84%EC%BA%90%EC%8B%B1\" aria-label=\"속도캐싱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>속도(캐싱)</h4>\n<p>보통 <code class=\"language-text\">GET</code>요청이 <code class=\"language-text\">POST</code>요청 보다 빠르다고 합니다.</p>\n<p>그 이유는 캐싱에 있는데 멱등성에 해당하지 않는 POST와 같은경우는 값이 수정되는 경우가 많아 먼저 왔던 요청에대한 값을 저장해 재활용하지 않습니다.</p>\n<p>하지만 GET의 경우 요청 시 서빙되는 정적파일과 같이 같은 값을 사용하는 경우가 대부분이며, 해당부분에 보안하기위해 응답받은 데이터를 캐싱합니다. 캐싱된 데이터는 다시 클라이언트가 요청을 했을때 확인 후 바로 렌더링해줍니다.</p>\n<p>이와 같이 GET의 캐싱은 성능향상에 큰 역할을 합니다.(HTTP 캐시들은 일반적으로 GET에 대한 응답만을 캐싱하며, 다른 메서드들은 제외된다고 합니다.)</p>\n<h5 id=\"캐싱제어\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%B1%EC%A0%9C%EC%96%B4\" aria-label=\"캐싱제어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐싱제어</h5>\n<p>헤더중 <code class=\"language-text\">Cache-control</code>에서 캐싱에대해 제어가 가능합니다.</p>\n<ul>\n<li>\n<p>캐시하지 않음 : 캐싱을 하지 않으며, 매 요청마다 다운로드합니다.</p>\n<blockquote>\n<p>Cache-Control: no-store</p>\n</blockquote>\n</li>\n<li>\n<p>캐시하지만 재검증 : 캐시된 복사본을 사용자에게 릴리즈 하기 전에, 유효성 확일을 위해 원 서버로 요청을 보냅니다.</p>\n<blockquote>\n<p>Cache-Control: no-cache</p>\n</blockquote>\n</li>\n<li>\n<p>사설 캐시와 공개 캐시</p>\n<blockquote>\n<p>Cache-Control: private\nCache-Control: public</p>\n</blockquote>\n<p><code class=\"language-text\">public</code>은 응답이 어떤 캐시에 의해서든 캐시되어도 좋다는 것을 가리킵니다. 반면 <code class=\"language-text\">private</code>은 응답이 단일 사용자만을 위한것이니 공용 ISP에 존재하는 웹 프록시와 같은 부분에서는 저장을 할수 없고, 사설 브라우저 캐시에서는 저장가능합니다.</p>\n</li>\n<li>\n<p>만료 : <code class=\"language-text\">max-age=&lt;seconds&gt;</code>로 리소스가 유효하다고 판단되는 최대 시간을 말합니다.</p>\n<blockquote>\n<p>Cache-Control: max-age=31536000</p>\n</blockquote>\n</li>\n</ul>\n<p>이외에도 추가적인 캐시제어가 가능합니다. <a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Caching\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a>에서 확인하세요 ㅎㅎ</p>","fields":{"slug":"/posts/network/3","tagSlugs":["/tag/http-method/","/tag/network/"]},"frontmatter":{"date":"2021-07-29T00:00:00","description":"dns를 공부해 보았습니다.","tags":["HTTP method","network"],"title":"GET과 POST의 차이","socialImage":{"publicURL":"/static/624cc4a835e68430a8beec01cef8ac6c/photo.jpg"}}}},"pageContext":{"slug":"/posts/network/3"}},"staticQueryHashes":["251939775","401334301","825871152"]}