{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/javascript/1","result":{"data":{"markdownRemark":{"id":"b99575bc-2faa-5755-9c40-ddbb954017b9","html":"<p>동기 비동기 관련에대해서 사용만 하고 제대로 이해해본적이 없었는데, 이번에 여기저기 블로그와 자료들을 보면서 든 생각은</p>\n<blockquote>\n<p>위 4가지 개념의 작동방식의 이해</p>\n</blockquote>\n<p>가 가장 중요한것 같았습니다.</p>\n<p>그 이후 자신이 사용하는 언어에서 어떤 식으로 작동하는지 확인해 봤을 때 조금 와닿는 느낌..?</p>\n<h3 id=\"동기와-비동기\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0\" aria-label=\"동기와 비동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기와 비동기</h3>\n<ul>\n<li>동기 : 함수 A가 함수 B를 호출한 뒤, 함수 <strong>B의 리턴값을 계속 확인하면서 신경쓰는 것</strong></li>\n<li>\n<p>비동기 : 함수 A가 함수 B를 호출할 때 <strong>콜백 함수를 함께 전달</strong>해서, 함수 B의 작업이 완료되면 함께 보낸 콜백 함수를 실행</p>\n<p>함수 A는 함수 B를 호출한 후로 함수 B의 작업 완료 여부에는 신경쓰지 않는다.</p>\n</li>\n</ul>\n<h3 id=\"블로킹과-논블로킹\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%A1%9C%ED%82%B9%EA%B3%BC-%EB%85%BC%EB%B8%94%EB%A1%9C%ED%82%B9\" aria-label=\"블로킹과 논블로킹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>블로킹과 논블로킹</h3>\n<p>제어권 : 함수 실행을 할수있는 권리 (cpu를 점유하고 running중인 상태같은 느낌으로 이해 함)</p>\n<ul>\n<li>블로킹 : A 함수가 B 함수를 호출하면, 제어권을 A가 호출한 B 함수에 넘김</li>\n<li>논블로킹 : A 함수가 B 함수를 호출해도 제어권은 그대로 자신이 가짐</li>\n</ul>\n<h3 id=\"글만-봤을-땐-여전히-이해가-되지-않아요\" style=\"position:relative;\"><a href=\"#%EA%B8%80%EB%A7%8C-%EB%B4%A4%EC%9D%84-%EB%95%90-%EC%97%AC%EC%A0%84%ED%9E%88-%EC%9D%B4%ED%95%B4%EA%B0%80-%EB%90%98%EC%A7%80-%EC%95%8A%EC%95%84%EC%9A%94\" aria-label=\"글만 봤을 땐 여전히 이해가 되지 않아요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글만 봤을 땐 여전히 이해가 되지 않아요..</h3>\n<p>그래서 javascript 예제를 가져와 봤습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 출력 결과\nstart\nadd start\nadd end\n3\nend\nhi\n*/</span></code></pre></div>\n<p>위의 코드를 짜면서 생각한 부분은(아래의 리스트는 순전히 개인적인 생각입니다. 틀린부분이 충분히 있을것 같은데, 확인이 되시는분들은 꼭 댓글 부탁드립니다 ㅜㅜ)</p>\n<ul>\n<li>일반적인 log찍는 함수에대한 결과가 바로바로나와 동기적으로 작동하는 부분이 있음</li>\n<li>setTimeout() 함수에서 <strong>콜백</strong>함수를 받았고 해당 함수를 2초뒤에 실행되어 결과가 나오는 부분으로 비동기적인 부분도 있음</li>\n<li>\n<p>async/await 문법에서</p>\n<ul>\n<li>\n<p>예</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">kakaoUserInfoApi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">code<span class=\"token punctuation\">,</span> access_token</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> resData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> baseApi\n<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/account/kakao/callback/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  code<span class=\"token punctuation\">,</span>\n  access_token<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>async/await가 없을때 :Promise객체가출력\nasync/await가 있을때 :응답에대한 값이 결과로 출력되는데,\nasync await가 적용된 저 코드에서는 Promise객체를 사용함(Promise객체를 살펴보면 응답에대해 성공 또는 실패 에대한 콜백의 정의가 포함된 객체입니다.)으로 <strong>비동기</strong>임과 동시에 async 함수 내부에서 await가 지정된 함수가 모든 동작을 완료 할때까지 기다려 줌으로 제어권이 넘어가기 때문에 <strong>블로킹</strong>으로 생각됩니다.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<blockquote>\n<p>어떤 분야의 개발을 하던 내가 사용하는 언어에서 모든 코드들이 어떤 식으로 스케줄링되고 있는지와 상태들을 제대로 알고 개발하는 게 중요한 것 같고, 그 부분에 있어서 이번 포스트의 4가지 개념에 대한 정의를 꼭 알고 있어야 한 것 같습니다.</p>\n</blockquote>\n<h5 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h5>\n<ul>\n<li><a href=\"https://velog.io/@nittre/%EB%B8%94%EB%A1%9C%ED%82%B9-Vs.-%EB%85%BC%EB%B8%94%EB%A1%9C%ED%82%B9-%EB%8F%99%EA%B8%B0-Vs.-%EB%B9%84%EB%8F%99%EA%B8%B0#2-%EB%B9%84%EB%8F%99%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">동기/비동기/블로킹/논블로킹 개념</a></li>\n<li><a href=\"https://nodejs.org/ko/docs/guides/blocking-vs-non-blocking/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바스크립트에서 블로킹, 논블로킹</a></li>\n</ul>","fields":{"slug":"/posts/javascript/1","tagSlugs":["/tag/javascript/","/tag/language/","/tag/cs/"]},"frontmatter":{"date":"2021-07-31T00:00:00","description":"동기와 비동기 / 블로킹과 논블로킹에대해 알아봅니다.","tags":["javascript","language","CS"],"title":"동기와 비동기 / 블로킹과 논블로킹","socialImage":{"publicURL":"/static/624cc4a835e68430a8beec01cef8ac6c/photo.jpg"}}}},"pageContext":{"slug":"/posts/javascript/1"}},"staticQueryHashes":["251939775","401334301","825871152"]}