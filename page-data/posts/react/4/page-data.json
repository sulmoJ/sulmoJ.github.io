{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/4","result":{"data":{"markdownRemark":{"id":"07d7ffff-3894-54f8-a0ab-c3b0be1a05c3","html":"<p>처음 라이프사이클에대한 간단한 숙지 이후 점차 생각치 않게되어 간략히 다시 정리해봅니다.</p>\n<h2 id=\"react-lifecycle\" style=\"position:relative;\"><a href=\"#react-lifecycle\" aria-label=\"react lifecycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Lifecycle</h2>\n<p>리액트에서 컴포넌트는 생명주기가 존재합니다. 둥글게 말하면 컴포넌트가 생성되어 돔에 그려지고 용도를 다하면 다시 제거되는 과정까지를 컴포넌트의 라이프사이클이라는 개념으로 구분지어 놓았습니다.</p>\n<p>이제 라이프사이클 상태별로 나눠 정리하고, 클래스형 컴포넌트에서 사용가능한 라이프사이클 함수들을 시점별로 간단히 정리해보겠습니다.</p>\n<p>리액트측에서 <strong>함수형 컴포넌트</strong>를 사용할것을 권장하고, 최근 대부분 함수형 컴포넌트로 작업을 하고있어 사용하지 않지만 과거부터 이어온 프로젝트의 경우 클래스형 컴포넌트를 사용중인 프로젝트도 있습니다.</p>\n<p><span style=\"color:#999\">함수형 컴포넌트와 클래스형 컴포넌트의 기능적차이가 있지는 않으니 기존의 클래스형을 굳이 바꾸진 않아도 된다고합니다. (혹시 레거시 덩어리를 만질수도 있으니 간단하게 알아는 놓는걸로..)<span></p>\n<h3 id=\"라이프사이클의-상태\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4%EC%9D%98-%EC%83%81%ED%83%9C\" aria-label=\"라이프사이클의 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라이프사이클의 상태</h3>\n<p>컴포넌트가 생성되고 사라지기까지 중 시기에 맞는 액션(?)같은게 존재합니다.</p>\n<ul>\n<li><a href=\"#mount\">Mount</a></li>\n<li>Update</li>\n<li>UnMount</li>\n</ul>\n<p>이렇게 세가지로 나뉘어 집니다.</p>\n<h4 id=\"mount\" style=\"position:relative;\"><a href=\"#mount\" aria-label=\"mount permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mount</h4>\n<p>마운트는 컴포넌트를 돔 노드로 생성, 돔 트리에 삽입, 그리고 삽입 직후까지의 범위입니다. 조금 둥글게 말하면 컴포넌트가 그려질 때까지의 상황입니다.</p>\n<p>마운트에 해당하는 <strong>클래스형 컴포넌트</strong> 라이프사이클 함수로</p>\n<ul>\n<li><strong>constructor()</strong> : 메서드 바인딩이나 state초기화를 위해 사용합니다. 필요하지 않다면 생략가능</li>\n<li>static getDerivedStateFromProps() : 최초 마운트 시와 갱신 시 이렇게 두가지 상황에서 render 메서드를 호출하기 직전에 호출됩니다.</li>\n<li><strong>render()</strong> : 필수로 작성해야하는 함수입니다. JSX가 반환되며 DOM노드를 만들도록 지시하는 함수입니다.</li>\n<li><strong>componentDidMount()</strong> : 마운트 일어난 직후 호출되는 함수입니다.</li>\n</ul>\n<p>이렇게 4가지가 순서대로 진행됩니다.</p>\n<!--\n함수형 컴포넌트에서는 useEffect를 활용하여 componentDidMount에 해당하는 기능을 사용합니다.\n\n```javascript\nuseEffect(() => {\n  console.log(\"component did mount with useEffect!\");\n});\nreturn (\n  <div>\n    <h1>Hello?</h1>\n  </div>\n);\n``` -->\n<h4 id=\"update\" style=\"position:relative;\"><a href=\"#update\" aria-label=\"update permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Update</h4>\n<p>한번 마운트된 컴포넌트에서는 상태나 props가 갱신되는 경우 그에 맞게 다시 렌더링을 해줘야합니다.</p>\n<p>업데이트 과정에 있어서 라이프사이클 함수들은 아래와 같은 순서로 진행됩니다.</p>\n<ul>\n<li>static getDerivedStateFromProps() : 최초 마운트 시와 갱신 시 모두에서 render 메서드를 호출하기 직전에 호출됩니다.</li>\n<li>shouldComponentUpdate() : props 또는 state가 새로운 값으로 갱신되어서 렌더링이 발생하기 직전에 호출됩니다.</li>\n<li>render() : 마운트가 수정되어 이뤄질때 다시 사용합니다.</li>\n<li>getSnapshotBeforeUpdate() : 가장 마지막으로 렌더링된 결과가 DOM 등에 반영되었을 때에 호출됩니다.</li>\n<li><strong>componentDidUpdate()</strong> : 갱신이 일어난 직후에 호출됩니다. 이 메서드는 최초 렌더링에서는 호출되지 않습니다.</li>\n</ul>\n<h4 id=\"unmount\" style=\"position:relative;\"><a href=\"#unmount\" aria-label=\"unmount permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unmount</h4>\n<p>DOM상에서 컴포넌트가 제거될때를 말합니다. 제거 이후에는 컨트롤 할 이유도 없고 접근할 이유도 없습니다.</p>\n<ul>\n<li><strong>componentWillUnmount()</strong> : 컴포넌트가 마운트 해제되어 제거되기 직전에 호출됩니다. 메서드 내의 타이머 제거나 네트워크 요청취소 등을 작업하며, 상태를 설정하는 함수들은 사용하지 않습니다. 다시 <code class=\"language-text\">render</code>함수가 호출되면 안됩니다.</li>\n</ul>\n<h4 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h4>\n<p>함수형 컴포넌트로 리액트를 처음부터 배우다보니 클래스형 컴포넌트가 많이 어색해 보였는데, 아주 약간은 해소가 된것 같습니다.</p>\n<p>함수형 컴포넌트에서 위와 같은 상황에서 어떻게 사용하는지는 따로 정리해볼 예정이며 위에 bold처리된 함수들은 가장 많이 쓰이고, 함수형 컴포넌트로 생명주기를 이해할때 비교하며 사용됨으로 꼭 인지 해보려합니다.</p>\n<p>이외에도 많은 함수들이 존재합니다. 꼭 공식문서를 같이 확인해봅시다.</p>\n<h4 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h4>\n<ul>\n<li><a href=\"https://krpeppermint100.medium.com/js-useeffect%EB%A5%BC-%ED%86%B5%ED%95%9C-react-hooks%EC%9D%98-lifecycle-%EA%B4%80%EB%A6%AC-3a65844bcaf8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a></li>\n<li><a href=\"https://ko.reactjs.org/docs/react-component.html#componentdidmount\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">공식문서</a></li>\n</ul>","fields":{"slug":"/posts/react/4","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2021-08-30T01:00:00","description":"React Lifecycle에대해 간략한 정리입니다.","tags":["react"],"title":"React Lifecyle","socialImage":{"publicURL":"/static/624cc4a835e68430a8beec01cef8ac6c/photo.jpg"}}}},"pageContext":{"slug":"/posts/react/4"}},"staticQueryHashes":["251939775","401334301","825871152"]}