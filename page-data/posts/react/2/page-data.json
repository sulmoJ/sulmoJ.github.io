{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/2","result":{"data":{"markdownRemark":{"id":"9449e9ea-fbca-5140-affb-d4a367aeac35","html":"<h2 id=\"build-your-own-react-step-012\" style=\"position:relative;\"><a href=\"#build-your-own-react-step-012\" aria-label=\"build your own react step 012 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build your own React (Step 0,1,2)</h2>\n<p>AUSG 5기 스터디 FE-Deep-Dive 중 Build your own react를 참고해 작성된 포스트입니다.</p>\n<h3 id=\"step-0\" style=\"position:relative;\"><a href=\"#step-0\" aria-label=\"step 0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 0</h3>\n<p>React, JSX, DOM 요소가 작동하는 법을 기존의 바닐라코드로 대체해보며 아주 작은코드로 <strong>간단하게</strong> 설명합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>h1 title<span class=\"token operator\">=</span><span class=\"token string\">\"foo\"</span><span class=\"token operator\">></span>Hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위에 3줄짜리 리액트 앱에서 리액트만의 코드를 제거하고 바닐라JS로 대체 해봅니다.</p>\n<ol>\n<li>\n<p><strong>JSX</strong> : <code class=\"language-text\">const element = &lt;h1 title=&quot;foo&quot;&gt;Hello&lt;/h1&gt;</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>h1 title<span class=\"token operator\">=</span><span class=\"token string\">\"foo\"</span><span class=\"token operator\">></span>Hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// jsx -> React.createElement</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>JSX는 <code class=\"language-text\">React.createElement</code>라는 DOM 노드를 생성하기 위한 정보를 템플리 언어처럼 사용할 수 있도록 돕습니다. 사용이 필수는 아니지만 UI 관련 작업에서 시각적으로 매우 도움이 됩니다.</p>\n<br>\n<p>JSX문법을 React.createElement로 변환해주는 컴파일러는 바벨입니다. <a href=\"https://babeljs.io/repl/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&#x26;build=&#x26;builtIns=false&#x26;corejs=3.6&#x26;spec=false&#x26;loose=false&#x26;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA&#x26;debug=false&#x26;forceAllTransforms=false&#x26;shippedProposals=false&#x26;circleciRepo=&#x26;evaluate=false&#x26;fileSize=false&#x26;timeTravel=false&#x26;sourceType=module&#x26;lineWrap=true&#x26;presets=react&#x26;prettier=false&#x26;targets=&#x26;version=7.15.3&#x26;externalPlugins=&#x26;assumptions=%7B%7D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">바벨 컴파일러로 직접 확인해보기</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// return React.createElement</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>createElement는 <a href=\"#step-1\">Step1</a>에서 조금 더 자세하게 알아봅니다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">ReactDOM.render(element, container)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span>\nnode<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>title\n​\n<span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\ntext<span class=\"token punctuation\">[</span><span class=\"token string\">\"nodeValue\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children\n\nnode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\ncontainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span></code></pre></div>\n<p>ReactDOM.render에서 container(html파일의 id가 root인 태그)에 React.createElement의 생성방식을 거친 컴포넌트를 렌더링합니다.</p>\n</li>\n</ol>\n<p>다음 Step 1,2에서 Step 0에서 간단히 본 React.createElement와 RecatDOM.render를 직접 만들어 봅니다. 실제 React코드의 아키텍처를 따르지만 전체를 구현하는건 아닙니다. 간단한 코드로 단순화 하여 편집된 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"foo\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">></span>bar<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>b <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 기준으로 만들어봅니다.</p>\n<h3 id=\"step-1-the-createelement-function\" style=\"position:relative;\"><a href=\"#step-1-the-createelement-function\" aria-label=\"step 1 the createelement function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: The createElement Function</h3>\n<h4 id=\"기존-리액트의-createelement\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%9D%98-createelement\" aria-label=\"기존 리액트의 createelement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 리액트의 createElement</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// React.createElement 반환 값</span>\n<span class=\"token function\">ReactElement</span><span class=\"token punctuation\">(</span>\n  type<span class=\"token punctuation\">,</span>\n  key<span class=\"token punctuation\">,</span>\n  ref<span class=\"token punctuation\">,</span>\n  props\n  <span class=\"token comment\">/*...*/</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>type : <code class=\"language-text\">div</code>, <code class=\"language-text\">span</code>, <code class=\"language-text\">h1</code>과 같은 DOM노드로 만들어질 html 태그를 정의하거나,</li>\n<li>config : 자식 요소에게 넘길 값(함수, 변수 등등)입니다. 객체로 존재하여 입력된 속성을 key와 value로 넘깁니다. 예약 속성으로 <a href=\"https://ko.reactjs.org/docs/lists-and-keys.html#keys\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">key</a>와 <a href=\"https://ko.reactjs.org/docs/refs-and-the-dom.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a>가 존재합니다.</li>\n<li>children : props로 반환되는 특별한 속성입니다. 배열로 여러가지가 들어가기도 하고, string으로 넘어가기도 합니다.</li>\n</ul>\n<br>\ncreateElement를 통해 받은 인자값들은 ReactElement를 반환합니다. config로 입력받은 객체에서 ref와 key속성은 따로 전달되며, 이 둘을 제외한 모든 속성은 props객체로 들어갑니다.\n<p>추가로 따로 전달 받은 children은 arguments의 수에 따라 type과 config를 제외하고 1개일때는 props.children에 그대로 들아가며, 그 이상일때는 배열로 생성되어 들어갑니다.</p>\n<br>\n<h4 id=\"createelement-직접-구현하기\" style=\"position:relative;\"><a href=\"#createelement-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"createelement 직접 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createElement 직접 구현하기</h4>\n<p>위에서 본 react의 구조를 간단하게 구현합니다.</p>\n<ul>\n<li>createTextElement : children배열에 element생성 시 객체가 아닌 primitive 값을 위한 특별한 유형을 생성해 함수를 만듭니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// children에 인자로 string이 넘어왔을 때 wrapper함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createTextElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"TEXT_ELEMENT\"</span><span class=\"token punctuation\">,</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      nodeValue<span class=\"token operator\">:</span> text<span class=\"token punctuation\">,</span>\n      children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>createElement : 위에서 봤던대로 props는 그대로 전달하고, children은 배열로 생성하며 위에서 만든 primitive 값을 위한 구분정도를 해줍니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 직접 만들어본 createElement</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">,</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>props<span class=\"token punctuation\">,</span>\n      children<span class=\"token operator\">:</span> children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">typeof</span> child <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">?</span> child <span class=\"token operator\">:</span> <span class=\"token function\">createTextElement</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div style=\"color:#999999\"> * 실제 React에서 primitive 값을 위해 래핑 하거나 children을 위해 빈 배열을 생성하진 않습니다. props에서 ref나 key와 같은 속성은 무시하고 진행합니다. </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 우리가 구현한 기능들</span>\n<span class=\"token keyword\">const</span> Didact <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  createElement<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\*_ @jsx Didact.createElement _</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 위와 같은 코멘트시, JSX 변경할때 바벨이 우리가 정의한 함수를 사용해줍니다.</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"foo\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">></span>bar<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>b <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"step-2--the-render-function\" style=\"position:relative;\"><a href=\"#step-2--the-render-function\" aria-label=\"step 2  the render function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2 : The render Function</h3>\n<p>이번엔 render를 구현합니다. 직접 DOM에 그려지는 단계입니다. DOM을 추가하는데 만 집중합니다. 다른 추가적인 기능은 고려하지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// createElement 생략</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dom을 생성하는 단계, step1에서 단순 createTextNode일때와 구분</span>\n  <span class=\"token keyword\">const</span> dom <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">\"TEXT_ELEMENT\"</span>\n      <span class=\"token operator\">?</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span>\n​\n<span class=\"token comment\">// props에 있는 값들을 dom의 속성으로 추가하기위한 단계,</span>\n<span class=\"token comment\">// key값중 Children은 요소를 만들기 위함이였기 때문에 필터 후</span>\n<span class=\"token comment\">// 남은 속성들을 dom의 속성으로 추가합니다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isProperty</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> key <span class=\"token operator\">!==</span> <span class=\"token string\">\"children\"</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isProperty<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      dom<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// children에 있는 컴포넌트들도 재귀로 render</span>\n  ​element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> dom<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Didact <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  createElement<span class=\"token punctuation\">,</span>\n  render<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 추가 완료!</span>\n<span class=\"token punctuation\">}</span>\n\nDidact<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h4>\n<ul>\n<li><a href=\"https://pomb.us/build-your-own-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">build your own React</a></li>\n<li><a href=\"https://ko.reactjs.org/docs/introducing-jsx.htmlhttps://ko.reactjs.org/docs/introducing-jsx.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react JSX</a></li>\n<li><a href=\"https://blog.sapzil.org/2016/03/17/react-internals-elements/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 소스코드 읽기</a></li>\n<li><a href=\"https://github.com/facebook/react/blob/f4cc45ce962adc9f307690e1d5cfa28a288418eb/packages/react/src/ReactElement.js#L354\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">facebook/react</a></li>\n</ul>","fields":{"slug":"/posts/react/2","tagSlugs":["/tag/jsx/","/tag/react/"]},"frontmatter":{"date":"2021-08-17T00:00:00","description":"AUSG 5기 스터디 FE-Deep-Dive 중 Build your own react를 참고해 작성된 포스트입니다. (Step 0,1,2)","tags":["JSX","react"],"title":"임포스터 날리기","socialImage":{"publicURL":"/static/624cc4a835e68430a8beec01cef8ac6c/photo.jpg"}}}},"pageContext":{"slug":"/posts/react/2"}},"staticQueryHashes":["251939775","401334301","825871152"]}