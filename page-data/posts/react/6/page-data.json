{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/6","result":{"data":{"markdownRemark":{"id":"ee0050d4-18e6-5d06-8372-a577b57f79d1","html":"<blockquote>\n<p>AUSG 5기 스터디 FE-Deep-Dive 중 Build your own react를 참고해 작성된 포스트입니다.</p>\n</blockquote>\n<h2 id=\"function-components\" style=\"position:relative;\"><a href=\"#function-components\" aria-label=\"function components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Components</h2>\n<p>이번엔 함수형 컴포넌트를 지원할수있도록 해봅니다.</p>\n<p>함수형 컴포넌트 파이버는 기존의 파이버와 두가지 차이가 있습니다.</p>\n<ul>\n<li>함수형 컴포넌트의 파이버는 돔노드가 없다.</li>\n<li>파이버의 자식요소는 실행 중인 함수에서 가져오는데, 대신 props로부터 바로 얻습니다.</li>\n</ul>\n<p>일단 이렇게만 알아두고 코드로 넘어가 보겠습니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fiber</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isFunctionComponent <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>type <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isFunctionComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">updateFunctionComponent</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">updateHostComponent</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>파이버의 타입을 체크해 업데이트 방식을 나눕니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateFunctionComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fiber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// TODO</span>\n<span class=\"token punctuation\">}</span>\n​\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateHostComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fiber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fiber<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fiber<span class=\"token punctuation\">.</span>dom <span class=\"token operator\">=</span> <span class=\"token function\">createDom</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">reconcileChildren</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">,</span> fiber<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">updateHostComponent</code>함수는 기존의 파이버를 업데이트하는 방식이라 차이가 없습니다.</p>\n<br/>\n<p>함수형 컴포넌트 업데이트 방식 처리를 위해 분리되었는데, <code class=\"language-text\">updateFunctionComponent</code> 함수에서는 함수형 컴포넌트의 children을 가져오기위해 만들어진 함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateFunctionComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fiber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>fiber<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token function\">reconcileChildren</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에서 본 두가지 차이점 중 두번째가 이 부분인 듯 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hi <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 함수가 현재 type에 들어있으면, 지금 App이라는 파이버는 아래처럼 존재 하고</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> App<span class=\"token punctuation\">,</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">fiber.type(fiber.props)</code>처럼 함수 실행중 props를 바로 가져다 사용하게 됩니다. 이렇게 App함수는 h1 앨리먼트를 반환해 재조정에 들어갑니다.</p>\n<br/>\n<p>다음으로 수정이 필요한 부분은 <code class=\"language-text\">commitWork</code>함수입니다.</p>\n<p>아래 코드가 기존 <code class=\"language-text\">commitWork</code>함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">commitWork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fiber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fiber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n​\n  <span class=\"token keyword\">const</span> domParent <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>dom\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    fiber<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">===</span> <span class=\"token string\">\"PLACEMENT\"</span> <span class=\"token operator\">&amp;&amp;</span>\n    fiber<span class=\"token punctuation\">.</span>dom <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    domParent<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    fiber<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">===</span> <span class=\"token string\">\"UPDATE\"</span> <span class=\"token operator\">&amp;&amp;</span>\n    fiber<span class=\"token punctuation\">.</span>dom <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">updateDom</span><span class=\"token punctuation\">(</span>\n      fiber<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">,</span>\n      fiber<span class=\"token punctuation\">.</span>alternate<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span>\n      fiber<span class=\"token punctuation\">.</span>props\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">===</span> <span class=\"token string\">\"DELETION\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    domParent<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n​\n  <span class=\"token function\">commitWork</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">commitWork</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>첫번째 특징에 함수형 컴포넌트는 <code class=\"language-text\">파이버의 형태에서 dom을 가지고 있지 않다</code> 라고 했습니다.</p>\n<p>그래서 commit작업에서 DOM노드가 없는 파이버에대한 처리를 두가지 정도 해줘야 합니다.</p>\n<br/>\n첫번째로\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 기존 코드</span>\n<span class=\"token keyword\">const</span> domParent <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>dom\n\n<span class=\"token comment\">// 이렇게 바꿔줍니다.</span>\n<span class=\"token keyword\">let</span> domParentFiber <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>parent\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>domParentFiber<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    domParentFiber <span class=\"token operator\">=</span> domParentFiber<span class=\"token punctuation\">.</span>parent\n  <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> domParent <span class=\"token operator\">=</span> domParentFiber<span class=\"token punctuation\">.</span>dom</code></pre></div>\n<p>기존 파이버에서 1촌 부모 파이버의 돔노드를 가져왔다면, 함수형 컴포넌트 파이버를 고려해, 가장 가까운 직계조상 파이버의 DOM노드를 찾을때까지 반복문을 돌립니다.</p>\n<br/>\n<p>두번째로</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> commitWork<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token comment\">// 기존</span>\n  domParent<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 변경 후</span>\n  <span class=\"token function\">commitDeletion</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">,</span> domParent<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">commitDeletion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fiber<span class=\"token punctuation\">,</span> domParent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    domParent<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">commitDeletion</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">,</span> domParent<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기존에 DOM노드 삭제 과정에서도 마찬가지로 직계 자손에 DOM노드가 존재하는지의 여부를 체크하며 재귀를 통해 찾아줍니다.</p>","fields":{"slug":"/posts/react/6","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2021-09-10T01:00:00","description":"AUSG 5기 스터디 FE-Deep-Dive 중 Build your own react를 참고해 작성된 포스트입니다. (Step 6)","tags":["react"],"title":"Build your own React (Step 7)","socialImage":{"publicURL":"/static/624cc4a835e68430a8beec01cef8ac6c/photo.jpg"}}}},"pageContext":{"slug":"/posts/react/6"}},"staticQueryHashes":["251939775","401334301","825871152"]}