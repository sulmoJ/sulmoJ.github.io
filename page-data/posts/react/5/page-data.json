{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/5","result":{"data":{"markdownRemark":{"id":"c9f56741-7c6f-574f-822c-ab41e46bb18b","html":"<blockquote>\n<p>AUSG 5기 스터디 FE-Deep-Dive 중 Build your own react를 참고해 작성된 포스트입니다.</p>\n</blockquote>\n<h2 id=\"reconciliation--재조정-\" style=\"position:relative;\"><a href=\"#reconciliation--%EC%9E%AC%EC%A1%B0%EC%A0%95-\" aria-label=\"reconciliation  재조정  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reconciliation ( 재조정 )</h2>\n<p>먼저 스장님의 조언에 따라 <a href=\"https://ko.reactjs.org/docs/reconciliation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">리액트 문서</a>를 먼저 읽고 <code class=\"language-text\">Build your own react</code>를 공부해보기로 합니다.</p>\n<p>리액트 공식문서의 내용을 아주 간단히 정리하면,</p>\n<p>리액트는 컴포넌트의 <strong>상태</strong>나 <strong>props</strong>가 변한다면 render함수를 통해 변화한 부분을 다시 렌더링합니다.</p>\n<p>이때 리액트는 실제 돔트리와 가상 돔트리를 비교해 다른 부분을 수정하는 방식인데 이때 두 트리의 비교연산에대해 알아봅니다.</p>\n<p>일반적인 유명한 비교 알고리즘으로는 O(n^3)의 복잡도를 보이는데, 리액트에서 아래 두가지 가정을 기반으로 O(n)의 <strong>휴리스틱</strong>한 알고리즘을 구현했습니다. <span style=\"color:#999\">포괄적이고 일반적인 비교가아닌 돔트리를 비교하기 때문에 그에 맞춘 비교 알고리즘을 만드는 것 같습니다.</span></p>\n<ol>\n<li>서로 다른 타입의 두 엘리먼트는 서로 다른 트리를 만들어낸다.</li>\n<li>개발자가 key prop을 통해, 여러 렌더링 사이에서 어떤 자식 엘리먼트가 변경되지 않아야 할지 표시해 줄 수 있다.</li>\n</ol>\n<h3 id=\"비교-알고리즘-diffing-algorithm\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EA%B5%90-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-diffing-algorithm\" aria-label=\"비교 알고리즘 diffing algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비교 알고리즘 (Diffing Algorithm)</h3>\n<p>두개의 트리를 비교할 때, React는 두 엘리먼트의 루트 엘리먼트 부터 비교하고 이후 동작은 루트 엘리먼트의 타입에 따라 다릅니다.</p>\n<ol>\n<li>두 트리의 루트 엘리먼트를 비교한다.</li>\n<li>루트 엘리먼트의 타입이 다를 시 기존의 트리를 모두 버리고 새로 돔트리를 구성한다. (모든 요소를 Unmount시키고 새로 다 mount한다.)</li>\n<li>\n<p>DOM 노드의 비교와 컴포넌트의 비교</p>\n<ul>\n<li>\n<p>DOM노드의 비교</p>\n<ol>\n<li>Dom 엘리먼트의 타입이 같은 경우 속성을 비교하는데 속성은 다른 부분만 새로 갱신한다.</li>\n<li>style이 갱신될 때는, 스타일 속성 중에서도 변경된 부분만 갱신한다.</li>\n<li>이후 해당 DOM노드의 처리가 끝나면 해당 노드의 자식들을 재귀적으로 처리합니다.</li>\n</ol>\n</li>\n<li>\n<p>컴포넌트의 비교</p>\n<ol>\n<li>같은 타입의 컴포넌트가 갱신되면, 인스턴스는 동일하게 유지되고 state가 유지됩니다. 업데이트된 새로운 엘리먼트의 내용을 반영하기 위해 현재 컴포넌트 인스턴스의 props를 갱신합니다.</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"자식에-대한-재귀적-처리\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%8B%9D%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9E%AC%EA%B7%80%EC%A0%81-%EC%B2%98%EB%A6%AC\" aria-label=\"자식에 대한 재귀적 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자식에 대한 재귀적 처리</h3>\n<p>React는 기본적으로 동시에 두 리스트를 순회하고 차이점이 있으면 변경을 생성합니다.</p>\n<p>그런데 변경을 감지하는 과정중에 리스트에 마지막에 추가시 문제가 없으나 첫번째 위치로 추가시 모든 리스트가 변경되었다고 인식합니다.</p>\n<p>그래서 key props를 지정해주면 위치에 상관없이 key값을 통해 비교함으로 <strong>형제 돔노드 범위에서 구분되도록 키값을 지정해주면</strong> 좀더 빠른 비교에 도움이 됩니다.</p>\n<h2 id=\"step-6-reconciliation\" style=\"position:relative;\"><a href=\"#step-6-reconciliation\" aria-label=\"step 6 reconciliation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 6: Reconciliation</h2>\n<p>지금까지는 DOM에 추가하는 방식만 생각해왔습니다. 이제 돔트리에 수정과 삭제에대해 봅시다.</p>\n<p>이전까지 작업을 생각해보면 다음 작업단위가 없는 상태가 될때 즉, 일단락 완성된 파이버 트리를 <code class=\"language-text\">commitRoot</code>함수를 통해 돔에 그렸습니다. </p>\n<p>이렇게 마지막 파이버 트리와 새로운 변경사항이 생긴 <code class=\"language-text\">render</code>를 통해 수신한 요소들을 비교해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">commitRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">commitWork</span><span class=\"token punctuation\">(</span>wipRoot<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  currentRoot <span class=\"token operator\">=</span> wipRoot <span class=\"token comment\">// 최신 파이버트리를 실제 Dom트리에 커밋 완료 후 따로 저장</span>\n  wipRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> currentRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></code></pre></div>\n<p>그래서 우리는 <code class=\"language-text\">currentRoot</code>라는 변수를 추가하고, 가장 최근에 추가된 파이버트리를 저장합니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  wipRoot <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    dom<span class=\"token operator\">:</span> container<span class=\"token punctuation\">,</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>element<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    alternate<span class=\"token operator\">:</span> currentRoot<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 이전 커밋단계의 파이버 트리와 연결을 위함</span>\n  <span class=\"token punctuation\">}</span>\n  nextUnitOfWork <span class=\"token operator\">=</span> wipRoot\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 <code class=\"language-text\">alternate</code> 속성을 모든 파이버의 속성으로 추가합니다. 이전 커밋단계의 파이버 트리와의 연결을 위한 속성입니다.</p>\n<br/>\n<p>다음으로 <code class=\"language-text\">performUnitOfWork</code>함수에서 새로운 파이버를 생성하는 코드들만 <code class=\"language-text\">reconcileChildren</code>함수로 추출합니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">reconcileChildren</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">wipFiber<span class=\"token punctuation\">,</span> elements</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> oldFiber <span class=\"token operator\">=</span>\n    wipFiber<span class=\"token punctuation\">.</span>alternate <span class=\"token operator\">&amp;&amp;</span> wipFiber<span class=\"token punctuation\">.</span>alternate<span class=\"token punctuation\">.</span>child\n  <span class=\"token keyword\">let</span> prevSibling <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n​\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>\n    index <span class=\"token operator\">&lt;</span> elements<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span>\n    oldFiber <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> newFiber <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n​\n    <span class=\"token comment\">// TODO compare oldFiber to element</span>\n​</code></pre></div>\n<p>이전 파이버와 파이버의 자식요소를 새로온 엘리먼트와 같이 재조정 하게됩니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> sameType <span class=\"token operator\">=</span>\n      oldFiber <span class=\"token operator\">&amp;&amp;</span>\n      element <span class=\"token operator\">&amp;&amp;</span>\n      element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> oldFiber<span class=\"token punctuation\">.</span>type\n​\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sameType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// TODO update the node</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>sameType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// TODO add this node</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldFiber <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>sameType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// TODO delete the oldFiber's node</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전 파이버트리와 새로변경 또는 추가될 엘리먼트를 유형을 나눠 비교합니다.</p>\n<ul>\n<li>이전 파이버와 새 요소의 유형이 같으면 DOM 노드를 유지하고 새 props로 <strong>업데이트</strong></li>\n<li>유형이 다르고 새 요소가 있으면 새 DOM 노드를 <strong>추가</strong></li>\n<li>유형이 다르고 이전 광섬유가 있는 경우 이전 노드를 <strong>제거</strong></li>\n</ul>\n<p><span style=\"color:#999\">여기서 React는 위에서 봤던 key props를 활용해 리액트는 더 빠른 비교를 합니다.</span></p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>sameType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  newFiber <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> element<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span>\n    props<span class=\"token operator\">:</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span>\n    dom<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    parent<span class=\"token operator\">:</span> wipFiber<span class=\"token punctuation\">,</span>\n    alternate<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    effectTag<span class=\"token operator\">:</span> <span class=\"token string\">\"PLACEMENT\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>타입이 다르고 새로운 요소가 필요한경우, <code class=\"language-text\">PLACEMENT</code>유형으로 추가하고 새로운 파이버를 생성합니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">reconcileChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldFiber <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>sameType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    oldFiber<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">=</span> <span class=\"token string\">\"DELETION\"</span>\n    deletions<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>oldFiber<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  deletions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> deletions <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></code></pre></div>\n<p>이전 파이버가 존재하고 새로운 유형에 없다면, <code class=\"language-text\">DELETION</code> 유형으로 이전 파이버에 추가하고 deletions라는 리스트에 해당 파이버를 추가합니다.</p>\n<p>deletions라는 배열에 추가했기 때문에 추적을 할수 있도록 전역변수 생성과 렌더시 초기화 되도록 작성합니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">commitRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  deletions<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>commitWork<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 위와 같이 커밋시 한번에 지워주도록 합니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sameType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  newFiber <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> oldFiber<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span>\n    props<span class=\"token operator\">:</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span>\n    dom<span class=\"token operator\">:</span> oldFiber<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">,</span>\n    parent<span class=\"token operator\">:</span> wipFiber<span class=\"token punctuation\">,</span>\n    alternate<span class=\"token operator\">:</span> oldFiber<span class=\"token punctuation\">,</span>\n    effectTag<span class=\"token operator\">:</span> <span class=\"token string\">\"UPDATE\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전 파이버와 타입이 같을 때, 일단 <code class=\"language-text\">UPDATE</code> 속성을 추가하고, 이전의 DOM노드와 타입을 유지하고, 비교한 엘리먼트의 props를 넣어 새로운 파이버를 생성합니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">commitWork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fiber</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    fiber<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">===</span> <span class=\"token string\">\"PLACEMENT\"</span> <span class=\"token operator\">&amp;&amp;</span>\n    fiber<span class=\"token punctuation\">.</span>dom <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    domParent<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    fiber<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">===</span> <span class=\"token string\">\"UPDATE\"</span> <span class=\"token operator\">&amp;&amp;</span>\n    fiber<span class=\"token punctuation\">.</span>dom <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">updateDom</span><span class=\"token punctuation\">(</span>\n      fiber<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">,</span>\n      fiber<span class=\"token punctuation\">.</span>alternate<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span>\n      fiber<span class=\"token punctuation\">.</span>props\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">===</span> <span class=\"token string\">\"DELETION\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    domParent<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이와같이 commit시 추가와 삭제는 appendChild, removeChild함수를 사용하여 처리합니다.</p>\n<p><code class=\"language-text\">UPDATE</code>는 삭제나 추가처럼 으로 간단하게 끝나고 직접 작성해 줘야합니다.</p>\n<br/>\n<p> <code class=\"language-text\">updateDom</code>함수를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// updateDom에서 사용할 메소드</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isEvent</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> key<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"on\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 이벤트 리스너 분리</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isProperty</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> key <span class=\"token operator\">!==</span> <span class=\"token string\">\"children\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isEvent</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNew</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> prev<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> next<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isGone</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> next<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 추가와 삭제는 appendChild, removeChild 함수를 쓰면 되지만 업데이트는 프롭스를 변경시켜줘야 한다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateDom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dom<span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">,</span> nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 안쓰거나 수정된 이벤트 리스너 제거</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isEvent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n      <span class=\"token parameter\">key</span> <span class=\"token operator\">=></span>\n        <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> nextProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token function\">isNew</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> eventType <span class=\"token operator\">=</span> name\n        <span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      dom<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>\n        eventType<span class=\"token punctuation\">,</span>\n        prevProps<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 필요 없어진 props 제거</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isProperty<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function\">isGone</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      dom<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 새로 생성되거나 수정된 props 적용</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isProperty<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNew</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      dom<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nextProps<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// 이벤트 리스너 추가 로직</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isEvent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNew</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> eventType <span class=\"token operator\">=</span> name\n        <span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      dom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n        eventType<span class=\"token punctuation\">,</span>\n        nextProps<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>이전 파이버의 props와 새 파이버의 props를 비교해 사라진 props는 제거하고 변경되거나 추가된 props를 추가</li>\n<li>“on”이라는 접두사가 붙은 prop은 이벤트 리스너생성 또는 제거로 분리</li>\n<li>\n<p>분리된 이벤트 리스너 prop에대해</p>\n<ul>\n<li>변경시 : 이벤트 리스너 제거 => 변경된걸로 추가</li>\n<li>새로 생성시 : 추가</li>\n</ul>\n</li>\n</ul>\n<p>위의 기능들을 구현하면 재조정에대한 기능 작성 부분들이 완료됩니다.</p>\n<h4 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h4>\n<ul>\n<li><a href=\"https://ko.reactjs.org/docs/reconciliation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react 공식문서</a></li>\n<li><a href=\"https://pomb.us/build-your-own-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Build your own react</a></li>\n</ul>","fields":{"slug":"/posts/react/5","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2021-09-03T01:00:00","description":"AUSG 5기 스터디 FE-Deep-Dive 중 Build your own react를 참고해 작성된 포스트입니다. (Step 6)","tags":["react"],"title":"Build your own React (Step 6)","socialImage":{"publicURL":"/static/624cc4a835e68430a8beec01cef8ac6c/photo.jpg"}}}},"pageContext":{"slug":"/posts/react/5"}},"staticQueryHashes":["251939775","401334301","825871152"]}