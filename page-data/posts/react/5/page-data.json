{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/5","result":{"data":{"markdownRemark":{"id":"c9f56741-7c6f-574f-822c-ab41e46bb18b","html":"<blockquote>\n<p>AUSG 5기 스터디 FE-Deep-Dive 중 Build your own react를 참고해 작성된 포스트입니다.</p>\n</blockquote>\n<h2 id=\"reconciliation--재조정-\" style=\"position:relative;\"><a href=\"#reconciliation--%EC%9E%AC%EC%A1%B0%EC%A0%95-\" aria-label=\"reconciliation  재조정  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reconciliation ( 재조정 )</h2>\n<p>리액트는 컴포넌트의 상태나 props가 변한다면 render함수를 통해 변화한 부분을 다시 렌더링합니다.</p>\n<p>이때 리액트는 실제 돔트리와 가상 돔트리를 비교해 다른 부분을 수정하는 방식인데 이때 두 트리의 비교연산에대해 알아봅니다.</p>\n<p>일반적인 유명한 비교 알고리즘으로는 O(n^3)의 복잡도를 보이는데, 리액트에서 아래 두가지 가정을 기반으로 O(n)의 <strong>휴리스틱</strong> 알고리즘을 구현했습니다.</p>\n<ol>\n<li>서로 다른 타입의 두 엘리먼트는 서로 다른 트리를 만들어낸다.</li>\n<li>개발자가 key prop을 통해, 여러 렌더링 사이에서 어떤 자식 엘리먼트가 변경되지 않아야 할지 표시해 줄 수 있다.</li>\n</ol>\n<h3 id=\"비교-알고리즘-diffing-algorithm\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EA%B5%90-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-diffing-algorithm\" aria-label=\"비교 알고리즘 diffing algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비교 알고리즘 (Diffing Algorithm)</h3>\n<p>두개의 트리를 비교할 때, React는 두 엘리먼트의 루트 엘리먼트 부터 비교하고 이후 동작은 루트 엘리먼트의 타입에 따라 다릅니다.</p>\n<ol>\n<li>두 트리의 루트 엘리먼트를 비교한다.</li>\n<li>루트 엘리먼트의 타입이 다를 시 기존의 트리를 버리고 새로 돔트리를 구성한다.</li>\n<li>Dom 엘리먼트의 타입이 같은 경우, 다음으로 속성을 비교하는데 속성은 다른 부분만 새로 갱신한다.</li>\n<li>style이 갱신될 때는, 스타일 속성중에서도 변경된 부분만 갱신한다.</li>\n<li>같은 타입의 컴포넌트가 갱신되면, 인스턴스는 동일하게 유지되고 state가 유지됩니다. 업데이트된 새로운 엘리먼트의 내용을 반영하기 위해 현재 컴포넌트 인스턴스의 props를 갱신합니다.</li>\n</ol>\n<p>리액트의 키 속성은 같은 형제 돔노드끼리 중 유일하면 됩니다.</p>","fields":{"slug":"/posts/react/5","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2021-09-03T01:00:00","description":"AUSG 5기 스터디 FE-Deep-Dive 중 Build your own react를 참고해 작성된 포스트입니다. (Step 6)","tags":["react"],"title":"Build your own React (Step 6)","socialImage":{"publicURL":"/static/624cc4a835e68430a8beec01cef8ac6c/photo.jpg"}}}},"pageContext":{"slug":"/posts/react/5"}},"staticQueryHashes":["251939775","401334301","825871152"]}