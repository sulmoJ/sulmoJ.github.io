{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/data_structure/2","result":{"data":{"markdownRemark":{"id":"8c540ecb-21e8-53cb-a20c-e09cc2060b36","html":"<br>\n<h3 id=\"heap\" style=\"position:relative;\"><a href=\"#heap\" aria-label=\"heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heap</h3>\n<blockquote>\n<p>완전 이진 트리의 일종으로 최대값이나 최솟값을 찾는데 최적화된 자료구조</p>\n</blockquote>\n<h4 id=\"특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h4>\n<ul>\n<li>완전 이진트리의 일종이며, 우선순위 큐를 위해 만들어짐</li>\n<li>반정렬 상태를 유지한다.(부모노드보다 자식노드가 작다/크다 로 유지)</li>\n<li>중복된 값을 허용한다.(이진 탐색 트리는 허용 안함)</li>\n</ul>\n<h4 id=\"힙의-종류\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"힙의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙의 종류</h4>\n<ul>\n<li>최대 힙(max heap): <code class=\"language-text\">key(부모 노드) &gt;= key(자식 노드)</code>을 만족하는 완전 이진 트리</li>\n<li>최소 힙(min heap): <code class=\"language-text\">key(부모 노드) &lt;= key(자식 노드)</code>을 만족하는 완전 이진 트리</li>\n</ul>\n<h4 id=\"삽입과-삭제\" style=\"position:relative;\"><a href=\"#%EC%82%BD%EC%9E%85%EA%B3%BC-%EC%82%AD%EC%A0%9C\" aria-label=\"삽입과 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>삽입과 삭제</h4>\n<p>* 최대힙을 기준으로 구현 및 설명 했습니다.</p>\n<p>힙을 구현시 기본적으로 배열에 저장을 하며, 삽입과 삭제 과정이 있다. 완전 이진트리이기 때문에 부모와 자식의 접근에 있어서 점화식이 정해져 있고 이를 활용하여 비교하며 위치를 잡는다.</p>\n<ul>\n<li>왼쪽 자식의 인덱스 = (부모의 인덱스) * 2</li>\n<li>오른쪽 자식의 인덱스 = (부모의 인덱스) * 2 + 1</li>\n<li>부모의 인덱스 = (자식의 인덱스) / 2</li>\n</ul>\n<h5 id=\"삽입\" style=\"position:relative;\"><a href=\"#%EC%82%BD%EC%9E%85\" aria-label=\"삽입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>삽입</h5>\n<ul>\n<li>배열의 가장 끝에 데이터를 추가한다.</li>\n<li>부모와 비교 후 자신보다 작다면 swap한다.</li>\n<li>부모노드의 값이 더 클때까지 반복</li>\n</ul>\n<h5 id=\"삭제\" style=\"position:relative;\"><a href=\"#%EC%82%AD%EC%A0%9C\" aria-label=\"삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>삭제</h5>\n<ul>\n<li>최대 값인 루트를 삭제한다.</li>\n<li>배열의 가장 끝에 데이터를 트리의 루트로 가져온다.</li>\n<li>자식 노드와 비교해 자신보다 큰 값과 swap한다.(자식 노드중에서도 더큰 자식 노드와 swap한다)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n\n<span class=\"token operator\">//</span> 삽입\n<span class=\"token keyword\">def</span> <span class=\"token function\">insert_heap</span><span class=\"token punctuation\">(</span>_heap<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _heap<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n    current_key <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>_heap<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current_key <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current_key <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> _heap<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>current_key<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> _heap<span class=\"token punctuation\">[</span>current_key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                _heap<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>current_key<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _heap<span class=\"token punctuation\">[</span>current_key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _heap<span class=\"token punctuation\">[</span>current_key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _heap<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>current_key<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n                current_key <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>current_key<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> _heap<span class=\"token punctuation\">[</span>current_key<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> _heap<span class=\"token punctuation\">[</span>current_key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                _heap<span class=\"token punctuation\">[</span>current_key<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _heap<span class=\"token punctuation\">[</span>current_key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _heap<span class=\"token punctuation\">[</span>current_key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _heap<span class=\"token punctuation\">[</span>current_key<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n                current_key <span class=\"token operator\">=</span> current_key<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n\n<span class=\"token operator\">//</span> 삭제\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete_heap</span><span class=\"token punctuation\">(</span>_heap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    max_val <span class=\"token operator\">=</span> _heap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    tmp <span class=\"token operator\">=</span> _heap<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    parant <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    child <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>child <span class=\"token operator\">&lt;=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>_heap<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> child <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>_heap<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">and</span> _heap<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> _heap<span class=\"token punctuation\">[</span>child<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            child <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">if</span> tmp <span class=\"token operator\">>=</span> _heap<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n\n        _heap<span class=\"token punctuation\">[</span>parant<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _heap<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span>\n\n        parant <span class=\"token operator\">=</span> child\n        child <span class=\"token operator\">*=</span> <span class=\"token number\">2</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>_heap<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        _heap<span class=\"token punctuation\">[</span>parant<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp\n    <span class=\"token keyword\">return</span> max_val\n\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n_heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    num <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>_heap<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>delete_heap<span class=\"token punctuation\">(</span>_heap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        insert_heap<span class=\"token punctuation\">(</span>_heap<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h4>\n<ul>\n<li>(여기 구현 코드가 더 깔끔함)[https://gmlwjd9405.github.io/2018/05/10/data-structure-heap.html]</li>\n<li>(깃헙레포2)[https://github.com/WooVictory/Ready-For-Tech-Interview/blob/master/Data%20Structure/%5BData%20Structure%5D%20Heap.md]</li>\n</ul>","fields":{"slug":"/posts/data_structure/2","tagSlugs":["/tag/data-structure/","/tag/heap/"]},"frontmatter":{"date":"2021-08-16T01:00:00","description":"자료구조 중 Heap에 대해서 정리해봅니다.","tags":["Data Structure","Heap"],"title":"Heap","socialImage":{"publicURL":"/static/624cc4a835e68430a8beec01cef8ac6c/photo.jpg"}}}},"pageContext":{"slug":"/posts/data_structure/2"}},"staticQueryHashes":["251939775","401334301","825871152"]}