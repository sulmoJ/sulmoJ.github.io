{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/OS/4","result":{"data":{"markdownRemark":{"id":"62dcb807-5fa3-5254-ae4e-8d25d06d04ec","html":"<br>\n<h3 id=\"프로세스-주소공간\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A3%BC%EC%86%8C%EA%B3%B5%EA%B0%84\" aria-label=\"프로세스 주소공간 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 주소공간</h3>\n<blockquote>\n<p>프로세스가 CPU에의해 실행될때 프로세스를 위해 할당되는 메모리 영역</p>\n</blockquote>\n<p>OS가 멀티프로그래밍을 위해 메모리를 다수가 동시에 돌려써야 하기 때문에 메모리의 데이터가 <strong>보호</strong>되어야 했고 그래서 메모리 영역을 구분하였다.</p>\n<p>메모리 영역에 대표적인 4가지 종류</p>\n<ul>\n<li>code(text)</li>\n<li>data</li>\n<li>stack</li>\n<li>heap</li>\n</ul>\n<h4 id=\"codetext\" style=\"position:relative;\"><a href=\"#codetext\" aria-label=\"codetext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code(text)</h4>\n<ul>\n<li>우리가 작성한 소스코드가 들어가는 부분. (텍스트 영역이라고도 부름)</li>\n<li>컴파일 타임에 결정되고 코드가 변경되면 안되기 때문에 <strong>읽기만 가능</strong>하다.</li>\n<li><strong>함수, 제어문, 상수</strong> 등이 여기에 지정된다.\n코드는 정적인 데이터라 메모리에 저장하기 쉽고 프로그램이 실행되면서 <strong>추가 메모리를 필요로 하지 않는다.</strong></li>\n</ul>\n<h4 id=\"data\" style=\"position:relative;\"><a href=\"#data\" aria-label=\"data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data</h4>\n<ul>\n<li>프로그램의 <strong>전역 변수와 정적 변수가 저장되는 영역</strong>이다.</li>\n<li>프로그램이 구동되는 동안 항상 접근 가능한 변수가 저장되는 영역이다.</li>\n<li>전역 변수, static 값을 참조한 코드는 컴파일 후 Data 영역의 주소값을 가르키도록 바뀐다.</li>\n<li>데이터 영역은 프로그램의 시작과 함께 할당되며, 프로그램이 종료되면 소멸한다.</li>\n<li>위 특성상 <strong>읽기, 쓰기가 가능</strong>하다.</li>\n</ul>\n<h4 id=\"stack\" style=\"position:relative;\"><a href=\"#stack\" aria-label=\"stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stack</h4>\n<ul>\n<li>함수의 호출과 관계되는 <strong>지역변수와 매개변수</strong>가 저장되는 영역이다.</li>\n<li>함수의 호출과 함께 할당되고 함수의 호출이 완료되면 소멸한다.</li>\n<li>Heap 영역에 생성된 Object 타입의 데이터 참조값이 할당된다.</li>\n<li>메모리의 높은 주소에서 낮은 주소의 방향으로 할당된다.</li>\n<li>컴파일 타임에 크기가 결정되기 때문에 무한히 할당 할 수 없다. 함수 호출이 무한히 많아지면 Stack overflow에러가 발생</li>\n</ul>\n<h4 id=\"heap\" style=\"position:relative;\"><a href=\"#heap\" aria-label=\"heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heap</h4>\n<ul>\n<li>런타임에 크기가 결정되는 메모리 영역이다.</li>\n<li>사용자에 의해 메모리 공간이 동적으로 할당되고 해제된다.</li>\n<li>클래스, 클로저가 이부분에 해당 된다.</li>\n<li>Heap과 Stack은 같은 공간을 공유한다. 다만 저장되는 방향이 다른데 Heap이 메모리 위쪽부터 할당되면 Stack은 아래에서 위로 할당된다. 이렇게 상대영역을 침범하게되면 각각 Stack overflow, Heap overflow가된다.</li>\n</ul>\n<h4 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h4>\n<ul>\n<li><a href=\"https://lipcoder.tistory.com/entry/2-6%EC%9E%A5-%EC%A3%BC%EC%86%8C-%EA%B3%B5%EA%B0%84%EC%9D%98-%EA%B0%9C%EB%85%90\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자세한 설명</a></li>\n<li><a href=\"https://gona.tistory.com/4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">특징 설명</a></li>\n</ul>","fields":{"slug":"/posts/OS/4","tagSlugs":["/tag/os/"]},"frontmatter":{"date":"2021-08-20T00:00:00","description":"프로세스와 스레드의 차이를 알아봅니다. 설명을 어떤식으로 쓸지 전혀 생각하지 않았어요.","tags":["OS"],"title":"프로세스 주소공간","socialImage":{"publicURL":"/static/6522b74580d592d86ca1741a09ed47bf/state.png"}}}},"pageContext":{"slug":"/posts/OS/4"}},"staticQueryHashes":["251939775","401334301","825871152"]}