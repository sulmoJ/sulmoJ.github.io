{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Database/4","result":{"data":{"markdownRemark":{"id":"ca383023-07d8-5785-9aa8-b36651c8314a","html":"<br/>\n<h3 id=\"트랜잭션\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98\" aria-label=\"트랜잭션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트랜잭션</h3>\n<blockquote>\n<p>데이터들에대한 처리를 완벽하게 도와주는 개념의 작업단위</p>\n</blockquote>\n<p>‘트랜잭션은 작업의 <strong>완전성</strong>을 보장해주는 것이다’ 라고 합니다. 쿼리를 작성하여 조작을 할때 일정 부분별로 캐시하고 작업이 정상적으로 이루어졌을때 확정하는 방식으로 사용합니다.</p>\n<p>사용자의 입장에서 작업의 논리적 단위로 이해하기 쉽고, 시스템의 입장에서는 데이터들을 접근 또는 변경하는 프로그램의 단위가 됩니다.</p>\n<h4 id=\"트랜잭션의-특성\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EC%9D%98-%ED%8A%B9%EC%84%B1\" aria-label=\"트랜잭션의 특성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트랜잭션의 특성</h4>\n<ul>\n<li>\n<p>원자성(Atomicity) : 트랜잭션이 DB에 모두 반영되거나 혹은 전혀 반영되지 않아야 한다.</p>\n<p><span style=\"color: #999999\">송금을 예로, 출금은 되었는데 입금과정중 에러로 입금이 되지 않으면 안된다. 이럴 시 송금이라는 트랜잭션에서 모두 반영되어서는 안된다.<span></p>\n</li>\n<li>일관성(Consistency)\n트랜잭션이 완료된 다음의 상태에서도 트랜잭션이 일어나기 전의 상황과 동일하게 데이터의 일관성을 보장해야 한다.(무결성이 위배되면 commit되어선 안된다.)</li>\n<li>고립성(Isolation)\n둘 이상의 트랜잭션이 동시에 병행 실행되고 있을 때, 어떤 트랜잭션도 다른 트랜잭션 연산에 끼어들 수 없다.</li>\n<li>지속성(Durability)\n트랜잭션이 정상적으로 종료된 다음에는 영구적으로 데이터베이스에 작업의 결과가 저장되어야 한다.</li>\n</ul>\n<h4 id=\"lock\" style=\"position:relative;\"><a href=\"#lock\" aria-label=\"lock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LOCK</h4>\n<p>Lock은 트랜잭션에서 순차성을 보장하기 위함으로 사용된다. 일반적으로는 여러 커넥션에서 동시에 동일한 자원을 요청할 경우 순서대로 한 시점에는 하나의 커넥션만 변경할 수 있게 해주는 역할이다.</p>\n<p>DBMS마다 Lock을 구현하는 방식과 세부적인 방법이 다릅니다. 따라서 DBMS를 효과적으로 이용하기 위해서는 해당 DB의 Lock에 대한 이해가 요구된다.</p>\n<h4 id=\"트랜잭션의-상태\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EC%9D%98-%EC%83%81%ED%83%9C\" aria-label=\"트랜잭션의 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트랜잭션의 상태</h4>\n<ul>\n<li>활동(Active) : 트랜잭션이 실행중인 상태</li>\n<li>실패(Failed) : 트랜잭션 실행에 오류가 발생하여 중단된 상태</li>\n<li>철회(Aborted) : 트랜잭션이 비정상적으로 종료되어 Rollback 연산을 수행한 상태</li>\n<li>부분 완료(Partially Committed) : 트랜잭션의 마지막 연산까지 실행했지만, Commit 연산이 실행되기 직전의 상태</li>\n<li>완료(Committed) : 트랜잭션이 성공적으로 종료되어 Commit 연산을 실행한 후의 상태</li>\n</ul>\n<h4 id=\"트랜잭션-방식-종류\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EB%B0%A9%EC%8B%9D-%EC%A2%85%EB%A5%98\" aria-label=\"트랜잭션 방식 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트랜잭션 방식 종류</h4>\n<blockquote>\n<p>DB별로 작성방식이 조금씩 달라서 이런 종류의 방식이 있구나 정도의 이해를 위해 작성합니다.</p>\n</blockquote>\n<h5 id=\"자동-커밋-트랜잭션\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%8F%99-%EC%BB%A4%EB%B0%8B-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98\" aria-label=\"자동 커밋 트랜잭션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동 커밋 트랜잭션</h5>\n<p>DELETE, INSERT, SELECT문이나 CREATE TABLE문과 같이 개별 명령문이 바로 하나의 트랜잭션을 의미하는 경우이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 자동 커밋 트랜잭션</span>\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">USER</span> <span class=\"token keyword\">WHERE</span> user_id<span class=\"token operator\">=</span><span class=\"token string\">'tester'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 명시적 트랜잭션</span>\n<span class=\"token keyword\">BEGIN</span> <span class=\"token keyword\">TRAN</span>\n<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">USER</span> <span class=\"token keyword\">WHERE</span> user_id<span class=\"token operator\">=</span><span class=\"token string\">'tester'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">COMMIT</span> <span class=\"token keyword\">TRAN</span></code></pre></div>\n<p>명시적 트랜잭션과 마찬가지로 BEGIN TRAN문과 COMMIT문이 명령문 앞뒤에 자동으로 붙어 수행된다.</p>\n<p>오라클의 경우 명시적으로 Commit문을 통해 트랜잭션을 종료하도록하는데 비하여 SQL은 자동으로 이러한 COMMIT문을 붙여서 이용한다.</p>\n<h5 id=\"명시적-트랜잭션\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98\" aria-label=\"명시적 트랜잭션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명시적 트랜잭션</h5>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">BEGIN</span> <span class=\"token keyword\">TRANSACTION</span>\n<span class=\"token comment\">// 또는</span>\n<span class=\"token keyword\">BEGIN</span> <span class=\"token keyword\">TRAN</span>\n\n<span class=\"token comment\">// 실행할 SQL구문들</span>\n\n<span class=\"token keyword\">SAVEPOINT</span> sp1\n\n<span class=\"token comment\">// 실행할 SQL구문들</span>\n\n<span class=\"token keyword\">SAVEPOINT</span> sp2\n\n<span class=\"token comment\">// 실행할 SQL구문들</span>\n\n<span class=\"token keyword\">ROLLBACK</span> <span class=\"token keyword\">TRANSACTION</span>\n<span class=\"token comment\">// 또는</span>\n<span class=\"token keyword\">ROLLBACK</span>\n<span class=\"token comment\">// 또는</span>\n<span class=\"token keyword\">COMMIT</span> <span class=\"token keyword\">TRANSACTION</span>\n<span class=\"token comment\">// 또는</span>\n<span class=\"token keyword\">COMMIT</span>\n<span class=\"token comment\">// 또는</span>\n<span class=\"token keyword\">ROLLBACK</span> <span class=\"token keyword\">TO</span> sp1</code></pre></div>\n<p>한번에 명시적인 명령을 모두 작성하였습니다.</p>\n<ul>\n<li>BEGIN : 트랜잭션의 시작지점을 정합니다.</li>\n<li>COMMIT : 시작지점부터의 조작된 DB를 완전히 저장합니다.</li>\n<li>ROLLBACK : 여러가지 예외상황들이 발생시 시작지점까지 복구합니다.</li>\n<li>SAVEPOINT : 지정한 구간으로 롤백이 가능합니다.(실제로 잘 사용되지 않는다고 하네요..?)</li>\n</ul>\n<p>이런식으로 명시를 하고 제어하여 사용하는 방법이 있습니다. 롤백시 BEGIN지점 까지 복구됩니다.</p>\n<ul>\n<li><a href=\"https://keep-cool.tistory.com/46\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">트랜잭션 컨트롤 언어(tcl)</a></li>\n<li><a href=\"https://coding-factory.tistory.com/226\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">트랜잭션 개념적 이해</a></li>\n<li><a href=\"https://github.com/JaeYeopHan/Interview_Question_for_Beginner/tree/master/Database#transaction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">레포</a></li>\n<li><a href=\"https://sabarada.tistory.com/121\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lock</a></li>\n</ul>","fields":{"slug":"/posts/Database/4","tagSlugs":["/tag/database/"]},"frontmatter":{"date":"2021-08-25T00:00:00","description":"트랜잭션에대해 정리합니다. 개념적으로 이해하기 위함이 큽니다.","tags":["Database"],"title":"데이터베이스 트랜잭션","socialImage":{"publicURL":"/static/624cc4a835e68430a8beec01cef8ac6c/photo.jpg"}}}},"pageContext":{"slug":"/posts/Database/4"}},"staticQueryHashes":["251939775","401334301","825871152"]}